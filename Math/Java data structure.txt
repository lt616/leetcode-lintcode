1. Queue Implementations

Being a Collection subtype all methods in the Collection interface are also available in the Queue interface.

Since Queue is an interface you need to instantiate a concrete implementation of the interface in order to use it. You can choose between the following Queue implementations in the Java Collections API:

    java.util.LinkedList
    java.util.PriorityQueue

LinkedList is a pretty standard queue implementation.

PriorityQueue stores its elements internally according to their natural order (if they implement Comparable), or according to a Comparator passed to the PriorityQueue.

There are also Queue implementations in the java.util.concurrent package, but I will leave the concurrency utilities out of this tutorial.

Here are a few examples of how to create a Queue instance:

Queue queueA = new LinkedList(); 
	queue.poll(); 
	queue.offer(); 
Queue queueB = new PriorityQueue(); 


2. Priority Queue (heap) 
Queue queue = new PriorityQueue(); 

In Java programming, Java Priority Queue is implemented using Heap Data Structures and Heap has O(log(n)) time complexity to insert and delete element. 


3. HashSet, TreeSet & LinkedHashSet 
https://www.programcreek.com/2013/03/hashset-vs-treeset-vs-linkedhashset/ 

HashSet is Implemented using a hash table. Elements are not ordered. The add, remove, and contains methods have constant time complexity O(1).

TreeSet is implemented using a tree structure(red-black tree in algorithm book). The elements in a set are sorted, but the add, remove, and contains methods has time complexity of O(log (n)). It offers several methods to deal with the ordered set like first(), last(), headSet(), tailSet(), etc.

LinkedHashSet is between HashSet and TreeSet. It is implemented as a hash table with a linked list running through it, so it provides the order of insertion. The time complexity of basic methods is O(1). 

4. Hashtable, Hashmap & Hashset 
https://javamagic.wordpress.com/2012/01/31/hashmap-vs-hashtable-vs-hashset/ 

Hashtable: Synchronized, no null value 
Hashmap: unsynchronized, null ok 
Hashset: no key only value 

5. Deque 
https://www.tutorialspoint.com/java/util/java_util_arraydeque.htm 

Deque<Integer> dq = new ArrayDeque(); 

6. TreeMap 
https://docs.oracle.com/javase/8/docs/api/java/util/TreeMap.html 

The implementation of red-black tree. The map is naturally sorted in the order of keys. 



